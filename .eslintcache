[{"D:\\data-science\\REACT\\chaing-cafe\\src\\index.js":"1","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\App.js":"2","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\GlobalStyles.js":"3","D:\\data-science\\REACT\\chaing-cafe\\src\\container\\MessageContainer.js":"4","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\MessageComponent.js":"5","D:\\data-science\\REACT\\chaing-cafe\\src\\container\\InputMessageContainer.js":"6","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\InputMessageComponent.js":"7","D:\\data-science\\REACT\\chaing-cafe\\src\\container\\BrownProfileContainer.js":"8","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\BrownProfileComponent.js":"9","D:\\data-science\\REACT\\chaing-cafe\\src\\container\\UserMessageContainer.js":"10","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\UserMessageComponent.js":"11","D:\\data-science\\REACT\\chaing-cafe\\src\\api.js":"12"},{"size":157,"mtime":1607245751064,"results":"13","hashOfConfig":"14"},{"size":2868,"mtime":1607245368606,"results":"15","hashOfConfig":"14"},{"size":584,"mtime":1607245402116,"results":"16","hashOfConfig":"14"},{"size":708,"mtime":1607245691614,"results":"17","hashOfConfig":"14"},{"size":1472,"mtime":1607246152407,"results":"18","hashOfConfig":"14"},{"size":1812,"mtime":1607245630337,"results":"19","hashOfConfig":"14"},{"size":1697,"mtime":1607245459838,"results":"20","hashOfConfig":"14"},{"size":325,"mtime":1607066670210,"results":"21","hashOfConfig":"14"},{"size":1447,"mtime":1607245543456,"results":"22","hashOfConfig":"14"},{"size":279,"mtime":1607245724694,"results":"23","hashOfConfig":"14"},{"size":866,"mtime":1607066827714,"results":"24","hashOfConfig":"14"},{"size":835,"mtime":1607246430609,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1xkthd7",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\data-science\\REACT\\chaing-cafe\\src\\index.js",[],["55","56"],"D:\\data-science\\REACT\\chaing-cafe\\src\\components\\App.js",["57"],"import GlobalStyles from \"./GlobalStyles\";\nimport styled from \"styled-components\";\nimport MessageContainer from \"../container/MessageContainer\";\nimport InputMessageContainer from \"../container/InputMessageContainer\";\nimport { useEffect, useState } from \"react\";\nimport { chatApi } from \"../api\";\n\n// 원래는 여기에 만들면 안 되는 데 이번에는 App.js에 모든 데이터를 넣겠음\n// 화면 가운데에 채팅화면 뜨게 스타일링\nconst MainContainer = styled.div`\n  margin: auto;\n  /* margin: auto -> 위, 아래, 양, 옆을 가질 수 있는 최대의 margin을 가지게 된다. */\n  max-width: 640px;\n  /* 핸드폰까지 같이 고려할 때 */\n  height: 80vh;\n  /* vh : vertical height : 화면 세로 길이의 80%만 차지하도록. \n  80hw : horizontal width : 화면 가로 길이의 80%만 차지하도록. */\n  display: flex;\n  flex-direction: column;\n  /* 위에 채팅창\n  밑에 입력창\n  세로로 쌓을 거라서 column */\n`;\n\nfunction App() {\n  // 단계A1. 채팅방에 띄워줄 메시지의 목록 -> 메시지들을 위한 배열\n  const [messages, setMessages] = useState([\n    {\n      text: \"안녕하세요! 챙 카페입니다🤗\",\n      isUser: false,\n      // 아무것도 안보내도 카페 기본 초기메시지 필요\n      // 카페가 말하면 왼쪽, 내가 입력한 값은 오른쪽에 띄워져야 함\n      // isUser 필요\n    },\n  ]);\n\n  // 2. 사용자가 입력한 내용을 관리할 state\n  const [userMessage, setUserMessage] = useState(\"\");\n\n  // userMessage가 변경되면 -> 서버에 전송\n  useEffect(() => {\n    // 전송할 비동기 함수 만들기\n    const sendMessage = async () => {\n      try {\n        if (userMessage !== \"\") {\n          // userMessage가 있을 때만 보냄. 없으면 보내지 않음.\n          // 즉, 입력한 내용이 있으면 전송\n          const returnMessage = await chatApi.sendMessage(userMessage);\n\n          const newMessages = messages.concat({\n            text: returnMessage,\n            isUser: false,\n          });\n          setMessages(newMessages);\n        }\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    sendMessage();\n  }, [userMessage]);\n\n  return (\n    <>\n      <GlobalStyles />\n      <MainContainer>\n        {/* 단계A2. messages는 MessageContainer로 들어감.\n        메시지가 넘어가면 setMessages를 통해 상태 messages라는 state가 바뀌어서\n        다시 **렌더링** 됨.\n        messages에 의해. */}\n        <MessageContainer messages={messages} />\n        {/* MessageComponent를 바로 호출하는 것이 아닌 부모인 MessageContainer부터 호출한다. */}\n        <InputMessageContainer\n          setUserMessage={setUserMessage}\n          setMessages={setMessages}\n          messages={messages}\n        />\n      </MainContainer>\n    </>\n  );\n}\n\nexport default App;\n","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\GlobalStyles.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\container\\MessageContainer.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\components\\MessageComponent.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\container\\InputMessageContainer.js",["58","59"],"import React, { useCallback, useRef } from \"react\";\r\nimport InputMessageComponent from \"../components/InputMessageComponent\";\r\n\r\nconst InputMessageContainer = ({ setUserMessage, setMessages, messages }) => {\r\n  // useRef() : 엘리먼트 1개를 특정하기 위해 사용\r\n  const inputRef = useRef();\r\n\r\n  // 보내기 버튼을 클릭하거나, 엔터키가 눌렸을 때의 작동을 하나의 함수로 작성.\r\n  const userProcess = () => {\r\n    // 1. 입력창에 입력된 텍스트를 가져오기\r\n    const sentence_q = inputRef.current.value;\r\n    inputRef.current.value = \"\";\r\n    // 원래는 state를 활용했었음.\r\n\r\n    // 메시지 리스트에 사용자가 입력한 메시지 추가\r\n    const newMessages = messages.concat({\r\n      text: sentence_q,\r\n      isUser: true,\r\n    });\r\n    // state는 항상 교체!\r\n\r\n    setMessages(newMessages);\r\n    // 화면에 사용자가 입력한 메세지를 반영하기 위해\r\n\r\n    // 그런데 아직 데이터를 보내지는 X\r\n\r\n    setUserMessage(sentence_q);\r\n    // 서버에 보낼 메세지를 세팅\r\n  };\r\n\r\n  // 버튼클릭 및 엔터키 눌렀을 때의 이벤트 작성\r\n  const handleSendBtnClickd = useCallback(() => {\r\n    userProcess();\r\n  }, [messages]);\r\n  // messages가 바뀔때마다 다시 만들어야 하기 때문에\r\n  // dependency : messages\r\n\r\n  const handleOnEnterKeyDown = useCallback(\r\n    (e) => {\r\n      // event 객체 필요\r\n      if (e.keyCode === 13) {\r\n        // 눌린 키가 13번이면 (엔터키이면)\r\n        userProcess();\r\n      }\r\n    },\r\n    [messages]\r\n  );\r\n\r\n  return (\r\n    <InputMessageComponent\r\n      handleSendBtnClickd={handleSendBtnClickd}\r\n      handleOnEnterKeyDown={handleOnEnterKeyDown}\r\n      inputRef={inputRef}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputMessageContainer;\r\n","D:\\data-science\\REACT\\chaing-cafe\\src\\components\\InputMessageComponent.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\container\\BrownProfileContainer.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\components\\BrownProfileComponent.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\container\\UserMessageContainer.js",[],"D:\\data-science\\REACT\\chaing-cafe\\src\\components\\UserMessageComponent.js",["60"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport MessageContainer from \"../container/MessageContainer\";\r\n\r\n// 단계2\r\nconst UserMessageContainer = styled.div`\r\n  border-radius: 10px;\r\n  width: 300px;\r\n  background: rgba(248, 218, 74, 1);\r\n  color: black;\r\n  display: flex;\r\n  padding: 0.5rem;\r\n  margin-top: 1.5rem;\r\n  align-self: flex-end;\r\n  // align-item : 자식이 어디에 배치될지\r\n  // align-self : 스스로가 어디에 배치될지\r\n  // flex-end : 오른쪽\r\n  // 시작이 왼쪽, 끝이 오른쪽\r\n`;\r\n\r\nconst UserMessageComponent = ({ message }) => {\r\n  return (\r\n    <>\r\n      {/* 단계B2. */}\r\n      {/* <UserMessageContainer>아이스 아메리카노 얼마에요?</UserMessageContainer> */}\r\n      <UserMessageContainer>{message}</UserMessageContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserMessageComponent;\r\n",["61","62"],"D:\\data-science\\REACT\\chaing-cafe\\src\\api.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":62,"column":6,"nodeType":"69","endLine":62,"endColumn":19,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":34,"column":6,"nodeType":"69","endLine":34,"endColumn":16,"suggestions":"72"},{"ruleId":"67","severity":1,"message":"71","line":46,"column":5,"nodeType":"69","endLine":46,"endColumn":15,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":24},{"ruleId":"63","replacedBy":"78"},{"ruleId":"65","replacedBy":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.","ArrayExpression",["82"],"React Hook useCallback has a missing dependency: 'userProcess'. Either include it or remove the dependency array.",["83"],["84"],"no-unused-vars","'MessageContainer' is defined but never used.","Identifier","unusedVar",["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"87","fix":"89"},"Update the dependencies array to be: [messages, userMessage]",{"range":"90","text":"91"},"Update the dependencies array to be: [userProcess]",{"range":"92","text":"93"},{"range":"94","text":"93"},[1662,1675],"[messages, userMessage]",[920,930],"[userProcess]",[1190,1200]]